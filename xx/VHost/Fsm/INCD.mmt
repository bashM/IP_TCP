package VHost::Fsm::INCD;
#================================================================--
# File Name    : VHost/Fsm/INC.pm
#
# Purpose      : ping file to pass a packet.
#
# Author       : Basheer, Vancouver Island University
#
# System       : Perl (Linux)
#
#=========================================================

$| = 1;
use strict;
use warnings;

include(mmt.pl)


use constant  TRUE => 1;
use constant  FALSE => 0;

sub  new {
   my $class = shift @_;
   my %params = @_;

   my $self = {
      taskID => my $taskID,
      dcbID => my $dcbID,
      semID => my $semID
   };

   if (defined($params{taskID})) {
      $self->{taskID} = $params{taskID};
   } else {
      die(Tosf::Exception::Trap->new(name => "Fsm::PING->new  taskID undefined"));
   }

   if (defined($params{dcbID})) {
      $self->{dcbID} = $params{dcbID};
   } else {
      die(Tosf::Exception::Trap->new(name => "Fsm::PING->new  dcbID undefined"));
   }

   if (defined($params{semID})) {
      $self->{semID} = $params{semID};
   } else {
      die(Tosf::Exception::Trap->new(name => "Fsm::PING->new  semID undefined"));
   }

   bless ($self, $class);
   return $self;
}

my %stdioLineParams = (
   maxbuff => 10000,
   inLeftFrame => '',
   inRightFrame => "\n",
   outLeftFrame => '',
   outRightFrame => "\n"
);

   my $pkt;
   my $dpkt;
   my $msg_tag;
   my $generic_packet = Inet::Packet::Generic->new();
mmt_TableBegin 

   my $ns;

mmt_TableRow(
   "fetch", 
	   
      my $readSuccess;    
      if(Inet::Table::DCB->get_opened($self->{dcbID})) {
         $pkt = Tosf::Table::QUEUE->dequeue($self->{taskID});
	 if((defined ($pkt))){
	    $readSuccess = TRUE;
	    $generic_packet->decode($pkt);
	    #$generic_packet->dump();
	    $msg_tag = $generic_packet->get_opcode();
 	    #$generic_packet->encode();
	         
            if(defined ($msg_tag)){
	       if($msg_tag eq "UDP") {
	          $ns = "UDP";  
   	       }
	    }
        }else{
           $readSuccess = FALSE;
	   $ns = "fetch";
           Tosf::Table::SEMAPHORE->wait(semaphore => $self->{semID}, task => $self->{taskID});
         }
      },
     $ns
)

mmt_TableRow(
   "UDP", 
      
      #my $t;
      my $msg = $generic_packet->get_msg();
      $generic_packet->set_msg($msg +1);
      
      #print "my t hererere :::::::$t\n";
      $generic_packet->set_dest_ip($generic_packet->get_src_ip());
      
      my $dest_ip;
      my $dest_ip_copy;
      ($dest_ip, $dest_ip_copy) = Inet::Table::ROUTE->get_route($generic_packet->get_dest_ip());
      if($dest_ip eq 'lo'){
         $generic_packet->set_src_ip($generic_packet->get_dest_ip());
      }else {
         $generic_packet->set_src_ip(Inet::Table::NIC->get_ip($dest_ip));
      }
      #$generic_packet->dump();
      $generic_packet->set_opcode("INCD");
        
      Inet::Table::DCB->enqueue_packet("stdio", "=-=-=-=-=-=- IN INCD GOING TO UDP -=-=-=-=-=-=", %stdioLineParams);
			
      Tosf::Table::QUEUE->enqueue('hUdp', $generic_packet->encode());
      Tosf::Table::SEMAPHORE->signal(semaphore =>'hUdpSem');
      ,
   "fetch"
)
mmt_TableEnd 

mmt_Reset(
   "fetch",

   Tosf::Table::SEMAPHORE->wait(semaphore => $self->{semID}, task => $self->{taskID});

)
1;

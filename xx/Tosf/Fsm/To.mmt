package Tosf::Fsm::To;
#================================================================--
# File Name    : Fsm/To.pm
#
# Purpose      : implements timeout task To
#
# Author       : Peter Walsh, Vancouver Island University
#
# System       : Perl (Linux)
#
#=========================================================

$| = 1;
use strict;
use warnings;

include(mmt.pl)

sub  new {
   my $class = shift @_;
   my %params = @_;

   my $self = {
      name => my $name,
      count => my $count,
      timeOut => my $timeOut,
      svName => my $svName
   };

   if (defined($params{name})) {
      $self->{name} = $params{name};
   } else {
      die(Tosf::Exception::Trap->new(name => "Task::To name undefined"));
   }

   if (defined($params{svName})) {
      $self->{svName} = $params{svName};
   } else {
      die(Tosf::Exception::Trap->new(name => "Task::To svName undefined"));
   }
                
   if (defined($params{timeOut})) {
      $self->{timeOut} = $params{timeOut}; 
   } else {
      die(Tosf::Exception::Trap->new(name => "Task::To timeout  undefined"));
   }
                
   bless ($self, $class);
   return $self;
}

sub nextState {
   my $c = shift @_;
   my $t = shift @_;

   if ($c == $t) {
      return("S2");
   } 

   return("S1");
}

mmt_TableBegin 

mmt_TableRow(
   "S1",

   $self->{count} = $self->{count} + 1;
   Tosf::Table::TASK->suspend($self->{name}),

   nextState($self->{count}, $self->{timeOut})
)

mmt_TableRow(
   "S2", 

   Tosf::Table::SVAR->assign($self->{svName}, 1);   
   Tosf::Table::TASK->suspend($self->{name}),

   "S3"
)

mmt_TableRow(
   "S3", 

   Tosf::Table::TASK->suspend($self->{name}),

   "S3"
)

mmt_TableEnd

mmt_Reset(
   "S1",

   $self->{count} = 0;
   Tosf::Table::SVAR->change($self->{svName}, 0)   
)


1;
